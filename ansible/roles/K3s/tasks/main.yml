---

  - name: Check if cgroups are defined in /boot/cmdline.txt
    lineinfile:
      path: /boot/cmdline.txt
      regexp: '.*cgroup_memory=1 cgroup_enable=memory.*'
      state: absent
    check_mode: yes
    changed_when: no
    register: cgroup_exists

  - name: Configure /boot/cmdline.txt
    shell: grep -q "$CGROUP" /boot/cmdline.txt || sudo sed -i -e "s/$/ $CGROUP/" /boot/cmdline.txt
    environment:
      CGROUP: "cgroup_memory=1 cgroup_enable=memory"
    when: cgroup_exists.found == 0
    notify:
    - Reboot host
    - Wait for host to reboot

  - name: Flush handlers
    meta: flush_handlers

  - name: Check if K3s is already installed
    stat:
      path: /usr/local/bin/k3s
    register: k3s_installed

  - name: Install K3s
    shell: curl -sfL https://get.k3s.io | sh -
    environment:
      INSTALL_K3S_EXEC: "--no-deploy traefik,servicelb"
    when: not k3s_installed.stat.exists

  - name: Install required python modules
    pip:
      name: openshift

  - name: Create K3s build directory
    file:
      path: /build/K3s
      state: directory

  - name: Add metallb helm repository
    kubernetes.core.helm_repository:
      name: metallb
      repo_url: https://metallb.github.io/metallb

  - name: Deploy metallb chart
    kubernetes.core.helm:
      name: metallb
      chart_ref: metallb/metallb
      release_namespace: "{{ metallb_ns }}"
      create_namespace: yes
      wait: yes

  - name: Copy manifest files to target
    template:
      src: "{{ item }}"
      dest: /build/K3s/
    with_fileglob:
    - "templates/*.yml.j2"

  - name: Apply metallb manifests
    command: kubectl apply -f /build/K3s/metallb.yml.j2
    retries: 3
    delay: 10
    register: result
    until: result is not failed

  - name: Add nginx ingress helm repository
    kubernetes.core.helm_repository:
      name: ingress-nginx
      repo_url: https://kubernetes.github.io/ingress-nginx

  - name: Deploy nginx ingress chart
    kubernetes.core.helm:
      name: ingress-nginx
      chart_ref: ingress-nginx/ingress-nginx
      release_namespace: "{{ nginx_ns }}"
      create_namespace: yes
      wait: yes
      values:
        defaultBackend:
          enabled: false
